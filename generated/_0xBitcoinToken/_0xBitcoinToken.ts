// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward_amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get epochCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newChallengeNumber(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class _0xBitcoinToken extends ethereum.SmartContract {
  static bind(address: Address): _0xBitcoinToken {
    return new _0xBitcoinToken("_0xBitcoinToken", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, tokens: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, tokens: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardEthBlockNumber(): BigInt {
    let result = super.call(
      "lastRewardEthBlockNumber",
      "lastRewardEthBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardEthBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardEthBlockNumber",
      "lastRewardEthBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMiningDifficulty(): BigInt {
    let result = super.call(
      "getMiningDifficulty",
      "getMiningDifficulty():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMiningDifficulty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMiningDifficulty",
      "getMiningDifficulty():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(nonce: BigInt, challenge_digest: Bytes): boolean {
    let result = super.call("mint", "mint(uint256,bytes32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(nonce),
      ethereum.Value.fromFixedBytes(challenge_digest)
    ]);

    return result[0].toBoolean();
  }

  try_mint(
    nonce: BigInt,
    challenge_digest: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(uint256,bytes32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(nonce),
      ethereum.Value.fromFixedBytes(challenge_digest)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(from: Address, to: Address, tokens: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardEra(): BigInt {
    let result = super.call("rewardEra", "rewardEra():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardEra(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardEra", "rewardEra():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getMiningTarget(): BigInt {
    let result = super.call(
      "getMiningTarget",
      "getMiningTarget():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMiningTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMiningTarget",
      "getMiningTarget():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMiningReward(): BigInt {
    let result = super.call(
      "getMiningReward",
      "getMiningReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMiningReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMiningReward",
      "getMiningReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChallengeNumber(): Bytes {
    let result = super.call(
      "getChallengeNumber",
      "getChallengeNumber():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getChallengeNumber(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getChallengeNumber",
      "getChallengeNumber():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  maxSupplyForEra(): BigInt {
    let result = super.call(
      "maxSupplyForEra",
      "maxSupplyForEra():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSupplyForEra(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSupplyForEra",
      "maxSupplyForEra():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensMinted(): BigInt {
    let result = super.call("tokensMinted", "tokensMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensMinted", "tokensMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardTo(): Address {
    let result = super.call("lastRewardTo", "lastRewardTo():(address)", []);

    return result[0].toAddress();
  }

  try_lastRewardTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("lastRewardTo", "lastRewardTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(tokenOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkMintSolution(
    nonce: BigInt,
    challenge_digest: Bytes,
    challenge_number: Bytes,
    testTarget: BigInt
  ): boolean {
    let result = super.call(
      "checkMintSolution",
      "checkMintSolution(uint256,bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromFixedBytes(challenge_digest),
        ethereum.Value.fromFixedBytes(challenge_number),
        ethereum.Value.fromUnsignedBigInt(testTarget)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkMintSolution(
    nonce: BigInt,
    challenge_digest: Bytes,
    challenge_number: Bytes,
    testTarget: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkMintSolution",
      "checkMintSolution(uint256,bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromFixedBytes(challenge_digest),
        ethereum.Value.fromFixedBytes(challenge_number),
        ethereum.Value.fromUnsignedBigInt(testTarget)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  epochCount(): BigInt {
    let result = super.call("epochCount", "epochCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochCount", "epochCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _MAXIMUM_TARGET(): BigInt {
    let result = super.call(
      "_MAXIMUM_TARGET",
      "_MAXIMUM_TARGET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__MAXIMUM_TARGET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_MAXIMUM_TARGET",
      "_MAXIMUM_TARGET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  miningTarget(): BigInt {
    let result = super.call("miningTarget", "miningTarget():(uint256)", []);

    return result[0].toBigInt();
  }

  try_miningTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("miningTarget", "miningTarget():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengeNumber(): Bytes {
    let result = super.call(
      "challengeNumber",
      "challengeNumber():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_challengeNumber(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "challengeNumber",
      "challengeNumber():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getMintDigest(
    nonce: BigInt,
    challenge_digest: Bytes,
    challenge_number: Bytes
  ): Bytes {
    let result = super.call(
      "getMintDigest",
      "getMintDigest(uint256,bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromFixedBytes(challenge_digest),
        ethereum.Value.fromFixedBytes(challenge_number)
      ]
    );

    return result[0].toBytes();
  }

  try_getMintDigest(
    nonce: BigInt,
    challenge_digest: Bytes,
    challenge_number: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getMintDigest",
      "getMintDigest(uint256,bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromFixedBytes(challenge_digest),
        ethereum.Value.fromFixedBytes(challenge_number)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  transfer(to: Address, tokens: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, tokens: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _BLOCKS_PER_READJUSTMENT(): BigInt {
    let result = super.call(
      "_BLOCKS_PER_READJUSTMENT",
      "_BLOCKS_PER_READJUSTMENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__BLOCKS_PER_READJUSTMENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BLOCKS_PER_READJUSTMENT",
      "_BLOCKS_PER_READJUSTMENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardAmount(): BigInt {
    let result = super.call(
      "lastRewardAmount",
      "lastRewardAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardAmount",
      "lastRewardAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approveAndCall(spender: Address, tokens: BigInt, data: Bytes): boolean {
    let result = super.call(
      "approveAndCall",
      "approveAndCall(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokens),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_approveAndCall(
    spender: Address,
    tokens: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveAndCall",
      "approveAndCall(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokens),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestDifficultyPeriodStarted(): BigInt {
    let result = super.call(
      "latestDifficultyPeriodStarted",
      "latestDifficultyPeriodStarted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestDifficultyPeriodStarted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestDifficultyPeriodStarted",
      "latestDifficultyPeriodStarted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferAnyERC20Token(tokenAddress: Address, tokens: BigInt): boolean {
    let result = super.call(
      "transferAnyERC20Token",
      "transferAnyERC20Token(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferAnyERC20Token(
    tokenAddress: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferAnyERC20Token",
      "transferAnyERC20Token(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _MINIMUM_TARGET(): BigInt {
    let result = super.call(
      "_MINIMUM_TARGET",
      "_MINIMUM_TARGET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__MINIMUM_TARGET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_MINIMUM_TARGET",
      "_MINIMUM_TARGET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(tokenOwner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(spender)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    tokenOwner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get challenge_digest(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveAndCallCall extends ethereum.Call {
  get inputs(): ApproveAndCallCall__Inputs {
    return new ApproveAndCallCall__Inputs(this);
  }

  get outputs(): ApproveAndCallCall__Outputs {
    return new ApproveAndCallCall__Outputs(this);
  }
}

export class ApproveAndCallCall__Inputs {
  _call: ApproveAndCallCall;

  constructor(call: ApproveAndCallCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ApproveAndCallCall__Outputs {
  _call: ApproveAndCallCall;

  constructor(call: ApproveAndCallCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferAnyERC20TokenCall extends ethereum.Call {
  get inputs(): TransferAnyERC20TokenCall__Inputs {
    return new TransferAnyERC20TokenCall__Inputs(this);
  }

  get outputs(): TransferAnyERC20TokenCall__Outputs {
    return new TransferAnyERC20TokenCall__Outputs(this);
  }
}

export class TransferAnyERC20TokenCall__Inputs {
  _call: TransferAnyERC20TokenCall;

  constructor(call: TransferAnyERC20TokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferAnyERC20TokenCall__Outputs {
  _call: TransferAnyERC20TokenCall;

  constructor(call: TransferAnyERC20TokenCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

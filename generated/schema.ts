// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MintCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintCheckpoint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintCheckpoint", id.toString(), this);
  }

  static load(id: string): MintCheckpoint | null {
    return store.get("MintCheckpoint", id) as MintCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get hashrate16(): BigInt {
    let value = this.get("hashrate16");
    return value.toBigInt();
  }

  set hashrate16(value: BigInt) {
    this.set("hashrate16", Value.fromBigInt(value));
  }

  get hashrate128(): BigInt {
    let value = this.get("hashrate128");
    return value.toBigInt();
  }

  set hashrate128(value: BigInt) {
    this.set("hashrate128", Value.fromBigInt(value));
  }

  get hashrate1024(): BigInt {
    let value = this.get("hashrate1024");
    return value.toBigInt();
  }

  set hashrate1024(value: BigInt) {
    this.set("hashrate1024", Value.fromBigInt(value));
  }

  get difficulty(): BigInt {
    let value = this.get("difficulty");
    return value.toBigInt();
  }

  set difficulty(value: BigInt) {
    this.set("difficulty", Value.fromBigInt(value));
  }

  get epochCount(): BigInt {
    let value = this.get("epochCount");
    return value.toBigInt();
  }

  set epochCount(value: BigInt) {
    this.set("epochCount", Value.fromBigInt(value));
  }

  get challengeNumber(): Bytes {
    let value = this.get("challengeNumber");
    return value.toBytes();
  }

  set challengeNumber(value: Bytes) {
    this.set("challengeNumber", Value.fromBytes(value));
  }

  get maxSupplyForEra(): BigInt {
    let value = this.get("maxSupplyForEra");
    return value.toBigInt();
  }

  set maxSupplyForEra(value: BigInt) {
    this.set("maxSupplyForEra", Value.fromBigInt(value));
  }

  get miningTarget(): BigInt {
    let value = this.get("miningTarget");
    return value.toBigInt();
  }

  set miningTarget(value: BigInt) {
    this.set("miningTarget", Value.fromBigInt(value));
  }

  get tokensMinted(): BigInt {
    let value = this.get("tokensMinted");
    return value.toBigInt();
  }

  set tokensMinted(value: BigInt) {
    this.set("tokensMinted", Value.fromBigInt(value));
  }

  get minterAddress(): Bytes {
    let value = this.get("minterAddress");
    return value.toBytes();
  }

  set minterAddress(value: Bytes) {
    this.set("minterAddress", Value.fromBytes(value));
  }
}

export class TokenHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenHolder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenHolder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenHolder", id.toString(), this);
  }

  static load(id: string): TokenHolder | null {
    return store.get("TokenHolder", id) as TokenHolder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}
